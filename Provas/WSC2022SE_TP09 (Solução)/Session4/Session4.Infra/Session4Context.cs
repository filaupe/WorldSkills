// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Session4.Infra.Models;

public partial class Session4Context : DbContext
{
    public Session4Context()
    {
    }

    public Session4Context(DbContextOptions<Session4Context> options)
        : base(options)
    {
    }

    public virtual DbSet<Amenity> Amenities { get; set; }

    public virtual DbSet<Area> Areas { get; set; }

    public virtual DbSet<Attraction> Attractions { get; set; }

    public virtual DbSet<Booking> Bookings { get; set; }

    public virtual DbSet<BookingDetail> BookingDetails { get; set; }

    public virtual DbSet<CancellationPolicy> CancellationPolicies { get; set; }

    public virtual DbSet<CancellationRefundFee> CancellationRefundFees { get; set; }

    public virtual DbSet<Coupon> Coupons { get; set; }

    public virtual DbSet<DimDate> DimDates { get; set; }

    public virtual DbSet<Item> Items { get; set; }

    public virtual DbSet<ItemAmenity> ItemAmenities { get; set; }

    public virtual DbSet<ItemAttraction> ItemAttractions { get; set; }

    public virtual DbSet<ItemPicture> ItemPictures { get; set; }

    public virtual DbSet<ItemPrice> ItemPrices { get; set; }

    public virtual DbSet<ItemScore> ItemScores { get; set; }

    public virtual DbSet<ItemType> ItemTypes { get; set; }

    public virtual DbSet<Score> Scores { get; set; }

    public virtual DbSet<Transaction> Transactions { get; set; }

    public virtual DbSet<TransactionType> TransactionTypes { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<UserType> UserTypes { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        => optionsBuilder.UseSqlServer(@"Data Source=.\WORLDSKILLSP1;Initial Catalog=Session4;Integrated Security=True;Encrypt=False;");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Attraction>(entity =>
        {
            entity.HasKey(e => e.ID).HasName("PK_SightseeingLocations");

            entity.HasOne(d => d.Area).WithMany(p => p.Attractions)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Attractions_Areas");
        });

        modelBuilder.Entity<Booking>(entity =>
        {
            entity.HasOne(d => d.Coupon).WithMany(p => p.Bookings).HasConstraintName("FK_Bookings_Coupons");

            entity.HasOne(d => d.Transaction).WithMany(p => p.Bookings).HasConstraintName("FK_Bookings_Transactions");

            entity.HasOne(d => d.User).WithMany(p => p.Bookings)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Bookings_Users");
        });

        modelBuilder.Entity<BookingDetail>(entity =>
        {
            entity.HasOne(d => d.Booking).WithMany(p => p.BookingDetails)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BookingDetails_Bookings");

            entity.HasOne(d => d.ItemPrice).WithMany(p => p.BookingDetails)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_BookingDetails_PlacePrices");
        });

        modelBuilder.Entity<CancellationRefundFee>(entity =>
        {
            entity.HasOne(d => d.CancellationPolicy).WithMany(p => p.CancellationRefundFees)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CancellationRefundFees_CancellationPolicies");
        });

        modelBuilder.Entity<DimDate>(entity =>
        {
            entity.Property(e => e.ID).ValueGeneratedNever();
        });

        modelBuilder.Entity<Item>(entity =>
        {
            entity.HasKey(e => e.ID).HasName("PK_Places");

            entity.HasOne(d => d.Area).WithMany(p => p.Items)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Items_Areas");

            entity.HasOne(d => d.ItemType).WithMany(p => p.Items)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Places_PlaceTypes");

            entity.HasOne(d => d.User).WithMany(p => p.Items)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Places_Users");
        });

        modelBuilder.Entity<ItemAmenity>(entity =>
        {
            entity.HasKey(e => e.ID).HasName("PK_PlaceAmenities");

            entity.HasOne(d => d.Amenity).WithMany(p => p.ItemAmenities)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PlaceAmenities_Amenities");

            entity.HasOne(d => d.Item).WithMany(p => p.ItemAmenities)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PlaceAmenities_Places");
        });

        modelBuilder.Entity<ItemAttraction>(entity =>
        {
            entity.HasKey(e => e.ID).HasName("PK_PlaceSightseeingLocations");

            entity.HasOne(d => d.Attraction).WithMany(p => p.ItemAttractions)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PlaceSightseeingLocations_SightseeingLocations");

            entity.HasOne(d => d.Item).WithMany(p => p.ItemAttractions)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PlaceSightseeingLocations_Places");
        });

        modelBuilder.Entity<ItemPicture>(entity =>
        {
            entity.HasKey(e => e.ID).HasName("PK_PlacePictures");

            entity.HasOne(d => d.Item).WithMany(p => p.ItemPictures)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PlacePictures_Places");
        });

        modelBuilder.Entity<ItemPrice>(entity =>
        {
            entity.HasKey(e => e.ID).HasName("PK_PlacePrices");

            entity.HasOne(d => d.CancellationPolicy).WithMany(p => p.ItemPrices)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PlacePrices_CancellationPolicies");

            entity.HasOne(d => d.Item).WithMany(p => p.ItemPrices)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PlacePrices_Places");
        });

        modelBuilder.Entity<ItemScore>(entity =>
        {
            entity.HasOne(d => d.Item).WithMany(p => p.ItemScores)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ItemScores_Items");

            entity.HasOne(d => d.Score).WithMany(p => p.ItemScores)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ItemScores_Scores");

            entity.HasOne(d => d.User).WithMany(p => p.ItemScores)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_ItemScores_Users");
        });

        modelBuilder.Entity<ItemType>(entity =>
        {
            entity.HasKey(e => e.ID).HasName("PK_PlaceTypes");
        });

        modelBuilder.Entity<Transaction>(entity =>
        {
            entity.HasOne(d => d.TransactionType).WithMany(p => p.Transactions)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Transactions_TransactionTypes");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasOne(d => d.UserType).WithMany(p => p.Users)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Users_UserTypes");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}